// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * libraryApplication
 * 図書館アプリのライブラリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 本の検索結果オブジェクト
 * @export
 * @interface BooksDto
 */
export interface BooksDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof BooksDto
     */
    isbns?: Array<string>;
}
/**
 * 棚卸のためのDto。本のISBNと現在棚卸を終わった数、棚卸対象の数、どのバージョンの棚卸結果か、あとメモ。
 * @export
 * @interface InventoryDto
 */
export interface InventoryDto {
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    isbn: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    num?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    maxNum: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    version: number;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    memo?: string;
}
/**
 * 棚卸のオブジェクト
 * @export
 * @interface InventorysDto
 */
export interface InventorysDto {
    /**
     * 
     * @type {Array<InventoryDto>}
     * @memberof InventorysDto
     */
    lendingRecords?: Array<InventoryDto>;
}
/**
 * 貸出帳の検索結果オブジェクト
 * @export
 * @interface LendingRecordDto
 */
export interface LendingRecordDto {
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    namae?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    simei?: string;
}
/**
 * 貸出帳のオブジェクト
 * @export
 * @interface LendingRecordsDto
 */
export interface LendingRecordsDto {
    /**
     * 
     * @type {Array<LendingRecordDto>}
     * @memberof LendingRecordsDto
     */
    lendingRecords?: Array<LendingRecordDto>;
}
/**
 * ランキングを表現する。idは呼び出し元の使い方により、userId等に読み替えられるようにする。
 * @export
 * @interface RankingDto
 */
export interface RankingDto {
    /**
     * 
     * @type {string}
     * @memberof RankingDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof RankingDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RankingDto
     */
    num: number;
}
/**
 * ランキングのリスト
 * @export
 * @interface RankingsDto
 */
export interface RankingsDto {
    /**
     * 
     * @type {Array<RankingDto>}
     * @memberof RankingsDto
     */
    rankings: Array<RankingDto>;
}
/**
 * null
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    familyName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    givenName?: string;
}
/**
 * ユーザのリスト
 * @export
 * @interface UsersDto
 */
export interface UsersDto {
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof UsersDto
     */
    users: Array<UserDto>;
}

/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options: any = {}): RequestArgs {
            const localVarPath = `/books`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionGet.');
            }
            const localVarPath = `/books/inventory/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionIsbnDelete.');
            }
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksInventoryVersionIsbnDelete.');
            }
            const localVarPath = `/books/inventory/{version}/{isbn}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionIsbnPut.');
            }
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksInventoryVersionIsbnPut.');
            }
            const localVarPath = `/books/inventory/{version}/{isbn}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionPut.');
            }
            const localVarPath = `/books/inventory/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options: any = {}): RequestArgs {
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksIsbnPut.');
            }
            const localVarPath = `/books/{isbn}`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooksDto> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventorysDto> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksInventoryVersionGet(version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksInventoryVersionIsbnDelete(version, isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksInventoryVersionIsbnPut(version, isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksInventoryVersionPut(version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BooksApiAxiosParamCreator(configuration).booksIsbnPut(isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: any) {
            return BooksApiFp(configuration).booksGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options?: any) {
            return BooksApiFp(configuration).booksInventoryVersionGet(version, options)(axios, basePath);
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any) {
            return BooksApiFp(configuration).booksInventoryVersionIsbnDelete(version, isbn, options)(axios, basePath);
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any) {
            return BooksApiFp(configuration).booksInventoryVersionIsbnPut(version, isbn, options)(axios, basePath);
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options?: any) {
            return BooksApiFp(configuration).booksInventoryVersionPut(version, options)(axios, basePath);
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options?: any) {
            return BooksApiFp(configuration).booksIsbnPut(isbn, options)(axios, basePath);
        },
    };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary 本を検索する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksGet(options?: any) {
        return BooksApiFp(this.configuration).booksGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 棚卸対象の一覧を取得する
     * @param {number} version 棚卸のバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksInventoryVersionGet(version: number, options?: any) {
        return BooksApiFp(this.configuration).booksInventoryVersionGet(version, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 誤って登録した棚卸を取り消す
     * @param {number} version 棚卸のバージョン
     * @param {number} isbn 棚卸対象のISBN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any) {
        return BooksApiFp(this.configuration).booksInventoryVersionIsbnDelete(version, isbn, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 本を棚卸する
     * @param {number} version 棚卸のバージョン
     * @param {number} isbn 棚卸対象のISBN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any) {
        return BooksApiFp(this.configuration).booksInventoryVersionIsbnPut(version, isbn, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary パラメータのISBNの棚卸を開始する
     * @param {number} version 棚卸のバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksInventoryVersionPut(version: number, options?: any) {
        return BooksApiFp(this.configuration).booksInventoryVersionPut(version, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 本を登録する
     * @param {string} isbn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksIsbnPut(isbn: string, options?: any) {
        return BooksApiFp(this.configuration).booksIsbnPut(isbn, options)(this.axios, this.basePath);
    }

}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options: any = {}): RequestArgs {
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksIsbnDelete.');
            }
            const localVarPath = `/books/{isbn}`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).booksIsbnDelete(isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options?: any) {
            return DefaultApiFp(configuration).booksIsbnDelete(isbn, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} isbn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIsbnDelete(isbn: string, options?: any) {
        return DefaultApiFp(this.configuration).booksIsbnDelete(isbn, options)(this.axios, this.basePath);
    }

}


/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionGet.');
            }
            const localVarPath = `/books/inventory/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionIsbnDelete.');
            }
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksInventoryVersionIsbnDelete.');
            }
            const localVarPath = `/books/inventory/{version}/{isbn}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionIsbnPut.');
            }
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksInventoryVersionIsbnPut.');
            }
            const localVarPath = `/books/inventory/{version}/{isbn}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options: any = {}): RequestArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling booksInventoryVersionPut.');
            }
            const localVarPath = `/books/inventory/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventorysDto> {
            const localVarAxiosArgs = InventoryApiAxiosParamCreator(configuration).booksInventoryVersionGet(version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = InventoryApiAxiosParamCreator(configuration).booksInventoryVersionIsbnDelete(version, isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = InventoryApiAxiosParamCreator(configuration).booksInventoryVersionIsbnPut(version, isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = InventoryApiAxiosParamCreator(configuration).booksInventoryVersionPut(version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 棚卸対象の一覧を取得する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionGet(version: number, options?: any) {
            return InventoryApiFp(configuration).booksInventoryVersionGet(version, options)(axios, basePath);
        },
        /**
         * 
         * @summary 誤って登録した棚卸を取り消す
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any) {
            return InventoryApiFp(configuration).booksInventoryVersionIsbnDelete(version, isbn, options)(axios, basePath);
        },
        /**
         * 
         * @summary 本を棚卸する
         * @param {number} version 棚卸のバージョン
         * @param {number} isbn 棚卸対象のISBN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any) {
            return InventoryApiFp(configuration).booksInventoryVersionIsbnPut(version, isbn, options)(axios, basePath);
        },
        /**
         * 
         * @summary パラメータのISBNの棚卸を開始する
         * @param {number} version 棚卸のバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksInventoryVersionPut(version: number, options?: any) {
            return InventoryApiFp(configuration).booksInventoryVersionPut(version, options)(axios, basePath);
        },
    };
};

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI {
    /**
     * 
     * @summary 棚卸対象の一覧を取得する
     * @param {number} version 棚卸のバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public booksInventoryVersionGet(version: number, options?: any) {
        return InventoryApiFp(this.configuration).booksInventoryVersionGet(version, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 誤って登録した棚卸を取り消す
     * @param {number} version 棚卸のバージョン
     * @param {number} isbn 棚卸対象のISBN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public booksInventoryVersionIsbnDelete(version: number, isbn: number, options?: any) {
        return InventoryApiFp(this.configuration).booksInventoryVersionIsbnDelete(version, isbn, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 本を棚卸する
     * @param {number} version 棚卸のバージョン
     * @param {number} isbn 棚卸対象のISBN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public booksInventoryVersionIsbnPut(version: number, isbn: number, options?: any) {
        return InventoryApiFp(this.configuration).booksInventoryVersionIsbnPut(version, isbn, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary パラメータのISBNの棚卸を開始する
     * @param {number} version 棚卸のバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public booksInventoryVersionPut(version: number, options?: any) {
        return InventoryApiFp(this.configuration).booksInventoryVersionPut(version, options)(this.axios, this.basePath);
    }

}


/**
 * LendingRecordsApi - axios parameter creator
 * @export
 */
export const LendingRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options: any = {}): RequestArgs {
            const localVarPath = `/lendingRecords`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingRecordsApi - functional programming interface
 * @export
 */
export const LendingRecordsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingRecordsDto> {
            const localVarAxiosArgs = LendingRecordsApiAxiosParamCreator(configuration).lendingRecordsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LendingRecordsApi - factory interface
 * @export
 */
export const LendingRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options?: any) {
            return LendingRecordsApiFp(configuration).lendingRecordsGet(options)(axios, basePath);
        },
    };
};

/**
 * LendingRecordsApi - object-oriented interface
 * @export
 * @class LendingRecordsApi
 * @extends {BaseAPI}
 */
export class LendingRecordsApi extends BaseAPI {
    /**
     * 
     * @summary 貸出帳を検索する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingRecordsApi
     */
    public lendingRecordsGet(options?: any) {
        return LendingRecordsApiFp(this.configuration).lendingRecordsGet(options)(this.axios, this.basePath);
    }

}


/**
 * RankingApi - axios parameter creator
 * @export
 */
export const RankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options: any = {}): RequestArgs {
            const localVarPath = `/ranking/books`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RankingApi - functional programming interface
 * @export
 */
export const RankingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankingsDto> {
            const localVarAxiosArgs = RankingApiAxiosParamCreator(configuration).rankingBooksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RankingApi - factory interface
 * @export
 */
export const RankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options?: any) {
            return RankingApiFp(configuration).rankingBooksGet(options)(axios, basePath);
        },
    };
};

/**
 * RankingApi - object-oriented interface
 * @export
 * @class RankingApi
 * @extends {BaseAPI}
 */
export class RankingApi extends BaseAPI {
    /**
     * 
     * @summary 本の貸し出しランキングを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public rankingBooksGet(options?: any) {
        return RankingApiFp(this.configuration).rankingBooksGet(options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary null
         * @param {UserDto} [users] tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(users?: UserDto, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (users !== undefined) {
                localVarQueryParameter['users'] = users;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(userId: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdDelete.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdGet.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersDto> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary null
         * @param {UserDto} [users] tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(users?: UserDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersPut(users, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersUserIdDelete(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any) {
            return UsersApiFp(configuration).usersGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary null
         * @param {UserDto} [users] tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(users?: UserDto, options?: any) {
            return UsersApiFp(configuration).usersPut(users, options)(axios, basePath);
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(userId: string, options?: any) {
            return UsersApiFp(configuration).usersUserIdDelete(userId, options)(axios, basePath);
        },
        /**
         * 
         * @summary null
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options?: any) {
            return UsersApiFp(configuration).usersUserIdGet(userId, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary null
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: any) {
        return UsersApiFp(this.configuration).usersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary null
     * @param {UserDto} [users] tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPut(users?: UserDto, options?: any) {
        return UsersApiFp(this.configuration).usersPut(users, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary null
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdDelete(userId: string, options?: any) {
        return UsersApiFp(this.configuration).usersUserIdDelete(userId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary null
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdGet(userId: string, options?: any) {
        return UsersApiFp(this.configuration).usersUserIdGet(userId, options)(this.axios, this.basePath);
    }

}


